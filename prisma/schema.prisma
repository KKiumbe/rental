generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Tenant {
  id                     Int                    @id @default(autoincrement())
  name                   String
  createdBy              String
  status                 TenantStatus           @default(ACTIVE)
  subscriptionPlan       String
  monthlyCharge          Float
  paymentDetails         String?
  createdAt              DateTime               @default(now())
  updatedAt              DateTime               @updatedAt
  email                  String?
  phoneNumber            String?
  alternativePhoneNumber String?
  county                 String?
  town                   String?
  address                String?
  building               String?
  street                 String?
  website                String?
  logoUrl                String?
  allowedUsers           Int                    @default(1)
  AbnormalWaterReading   AbnormalWaterReading[]
  auditLogs              AuditLog[]
  Building               Building[]
  customers              Customer[]
  Deposit                Deposit[]
  GasConsumption         GasConsumption[]
  Invoice                Invoice[]
  Landlord               Landlord[]
  LeaseTermination       LeaseTermination[]
  mpesaConfig            MPESAConfig?
  MPESATransaction       MPESATransactions[]
  notifications          Notification[]
  Payment                Payment[]
  PaymentLink            PaymentLink[]
  Receipt                Receipt[]
  SMS                    SMS[]
  smsConfig              SMSConfig?
  Task                   Task[]
  tenantInvoices         TenantInvoice[]
  tenantPayments         TenantPayment[]
  Unit                   Unit[]
  users                  User[]
  UserActivity           UserActivity[]
  WaterConsumption       WaterConsumption[]
  powerConsumption       powerConsumption[]
}

model TenantInvoice {
  id            String          @id @default(uuid())
  tenantId      Int
  invoicePeriod DateTime
  invoiceNumber String          @unique
  invoiceAmount Float
  status        InvoiceStatus   @default(UNPAID)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  amountPaid    Float           @default(0)
  tenant        Tenant          @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  payments      TenantPayment[]
}

model TenantPayment {
  id              String        @id @default(uuid())
  tenantInvoiceId String
  tenantId        Int
  amount          Float
  modeOfPayment   ModeOfPayment
  transactionId   String?       @unique
  createdAt       DateTime      @default(now())
  tenant          Tenant        @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantInvoice   TenantInvoice @relation(fields: [tenantInvoiceId], references: [id], onDelete: Cascade)
}

model User {
  id                   Int                    @id @default(autoincrement())
  tenantId             Int
  firstName            String
  lastName             String
  email                String                 @unique
  phoneNumber          String                 @unique
  gender               String?
  county               String?
  town                 String?
  password             String
  role                 String[]
  customPermissions    Json?
  createdBy            Int?
  status               UserStatus             @default(ACTIVE)
  mfaEnabled           Boolean                @default(false)
  lastLogin            DateTime
  loginCount           Int                    @default(0)
  resetCode            String?
  resetCodeExpiresAt   DateTime?
  otpAttempts          Int                    @default(0)
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  AbnormalWaterReading AbnormalWaterReading[]
  AuditLog             AuditLog[]
  Building             Building[]
  notifications        Notification[]
  Task                 Task[]
  TaskAssignee         TaskAssignee[]
  tenant               Tenant                 @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  userActivities       UserActivity[]
  WaterConsumption     WaterConsumption[]
  powerConsumption     powerConsumption[]
  User_A               User[]                 @relation("CreatedUsers")
  User_B               User[]                 @relation("CreatedUsers")
}

model UserActivity {
  id         Int       @id @default(autoincrement())
  userId     Int
  action     String
  timestamp  DateTime  @default(now())
  tenantId   Int
  customerId String?
  details    Json?
  customer   Customer? @relation(fields: [customerId], references: [id])
  tenant     Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([tenantId])
  @@index([userId])
  @@index([customerId])
}

model AuditLog {
  id          String    @id @default(uuid())
  tenantId    Int
  userId      Int
  action      String
  resource    String
  details     Json?
  description String?
  createdAt   DateTime  @default(now())
  customerId  String?
  customer    Customer? @relation(fields: [customerId], references: [id])
  tenant      Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([customerId])
  @@index([tenantId])
  @@index([userId])
  @@index([action])
}

model SMSConfig {
  id                         Int      @id @default(autoincrement())
  tenantId                   Int      @unique
  partnerId                  String
  apiKey                     String
  shortCode                  String
  customerSupportPhoneNumber String
  createdAt                  DateTime @default(now())
  updatedAt                  DateTime @updatedAt
  tenant                     Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
}

model MPESAConfig {
  id               Int                 @id @default(autoincrement())
  tenantId         Int                 @unique
  shortCode        String              @unique
  name             String
  apiKey           String
  passKey          String
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt
  secretKey        String              @default("uuid()")
  tenant           Tenant              @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  MPESATransaction MPESATransactions[]
}

model Landlord {
  id          String         @id @default(uuid())
  tenantId    Int
  firstName   String
  lastName    String
  email       String?        @unique
  phoneNumber String         @unique
  status      LandlordStatus @default(ACTIVE)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  buildings   Building[]
  tenant      Tenant         @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId])
  @@index([phoneNumber])
  @@index([email])
}

model Building {
  id                            String     @id @default(uuid())
  tenantId                      Int
  landlordId                    String
  name                          String
  address                       String?
  unitCount                     Int?
  createdAt                     DateTime   @default(now())
  updatedAt                     DateTime   @updatedAt
  gasRate                       Float?
  waterRate                     Float?
  allowWaterBillingWithAverages Boolean    @default(false)
  billAmenities                 Boolean    @default(false)
  billBackupGenerator           Boolean    @default(false)
  billGarbage                   Boolean    @default(false)
  billGas                       Boolean    @default(false)
  billSecurity                  Boolean    @default(false)
  billServiceCharge             Boolean    @default(false)
  billWater                     Boolean    @default(false)
  allowGasBillingWithAverages   Boolean    @default(false)
  managementRate                Float?
  billType                      BillType   @default(FULL)
  caretakerId                   Int?
  billPower                     Boolean    @default(false)
  User                          User?      @relation(fields: [caretakerId], references: [id])
  landlord                      Landlord   @relation(fields: [landlordId], references: [id], onDelete: Cascade)
  tenant                        Tenant     @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  units                         Unit[]
  Customer                      Customer[] @relation("BuildingToCustomer")

  @@index([tenantId])
  @@index([landlordId])
}

model CustomerUnit {
  id         String    @id @default(uuid())
  customerId String
  unitId     String
  isActive   Boolean   @default(true)
  startDate  DateTime  @default(now())
  endDate    DateTime?
  customer   Customer  @relation(fields: [customerId], references: [id])
  unit       Unit      @relation(fields: [unitId], references: [id])

  @@unique([customerId, unitId, isActive], name: "customer_unit_active_unique")
}

model Unit {
  id                    String         @id @default(uuid())
  tenantId              Int
  buildingId            String
  unitNumber            String
  monthlyCharge         Float          @default(0)
  depositAmount         Float          @default(0)
  garbageCharge         Float?
  serviceCharge         Float?
  status                UnitStatus     @default(VACANT)
  createdAt             DateTime       @default(now())
  updatedAt             DateTime       @updatedAt
  amenitiesCharge       Float?
  backupGeneratorCharge Float?
  securityCharge        Float?
  customers             Customer[]
  CustomerUnit          CustomerUnit[]
  Invoice               Invoice[]
  building              Building       @relation(fields: [buildingId], references: [id], onDelete: Cascade)
  tenant                Tenant         @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId])
  @@index([buildingId])
  @@index([unitNumber])
}

model Customer {
  id                   String                 @id @default(uuid())
  tenantId             Int
  firstName            String
  lastName             String
  email                String?
  phoneNumber          String                 @unique
  status               CustomerStatus         @default(ACTIVE)
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  closingBalance       Float                  @default(0)
  secondaryPhoneNumber String?
  nationalId           String?                @unique
  unitId               String?
  leaseEndDate         DateTime?
  leaseFileUrl         String?
  leaseStartDate       DateTime?
  AbnormalWaterReading AbnormalWaterReading[]
  AuditLog             AuditLog[]
  tenant               Tenant                 @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  unit                 Unit?                  @relation(fields: [unitId], references: [id])
  CustomerUnit         CustomerUnit[]
  deposits             Deposit[]
  gasConsumptions      GasConsumption[]
  invoices             Invoice[]
  LeaseTermination     LeaseTermination[]
  PaymentLink          PaymentLink[]
  receipts             Receipt[]
  UserActivity         UserActivity[]
  waterConsumptions    WaterConsumption[]
  powerConsumption     powerConsumption[]
  Building             Building[]             @relation("BuildingToCustomer")
  taskAssignees        TaskAssignee[]         @relation("CustomerToTaskAssignee")

  @@index([tenantId])
  @@index([unitId])
  @@index([phoneNumber])
  @@index([email])
  @@index([nationalId])
  @@index([status])
}

model Deposit {
  id                  String        @id @default(uuid())
  tenantId            Int
  customerId          String
  invoiceId           String?
  amount              Float
  status              DepositStatus @default(ACTIVE)
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  refundedAt          DateTime?
  refundAmount        Float?
  deductionReason     String?
  refundTransactionId String?       @unique
  customer            Customer      @relation(fields: [customerId], references: [id], onDelete: Cascade)
  invoice             Invoice?      @relation(fields: [invoiceId], references: [id])
  tenant              Tenant        @relation(fields: [tenantId], references: [id], onDelete: Cascade)
}

model GasConsumption {
  id          String   @id @default(uuid())
  customerId  String
  period      DateTime
  consumption Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  reading     Float
  tenantId    Int
  customer    Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([customerId, period])
}

model WaterConsumption {
  id                   String                 @id @default(uuid())
  customerId           String
  period               DateTime
  consumption          Float
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  reading              Float
  tenantId             Int
  meterPhotoUrl        String?
  readById             Int?
  Invoice              Invoice[]
  customer             Customer               @relation(fields: [customerId], references: [id], onDelete: Cascade)
  User                 User?                  @relation(fields: [readById], references: [id])
  tenant               Tenant                 @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  AbnormalWaterReading AbnormalWaterReading[] @relation("AbnormalWaterReadingToWaterConsumption")

  @@index([customerId, period])
}

model Invoice {
  id                 String             @id @default(uuid())
  tenantId           Int
  customerId         String
  invoicePeriod      DateTime
  invoiceNumber      String             @unique
  status             InvoiceStatus      @default(UNPAID)
  createdAt          DateTime           @default(now())
  amountPaid         Float              @default(0)
  updatedAt          DateTime           @updatedAt
  closingBalance     Float              @default(0)
  invoiceAmount      Float
  createdBy          String
  isSystemGenerated  Boolean
  unitId             String?
  invoiceType        InvoiceType
  waterConsumptionId String?
  Deposit            Deposit[]
  customer           Customer           @relation(fields: [customerId], references: [id], onDelete: Cascade)
  tenant             Tenant             @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  unit               Unit?              @relation(fields: [unitId], references: [id])
  WaterConsumption   WaterConsumption?  @relation(fields: [waterConsumptionId], references: [id])
  InvoiceItem        InvoiceItem[]
  ReceiptInvoice     ReceiptInvoice[]   @relation("InvoiceReceipts")
  payments           Payment[]          @relation("InvoiceToPayment")
  powerConsumption   powerConsumption[] @relation("InvoiceTopowerConsumption")
  LeaseTermination   LeaseTermination[] @relation("TerminationInvoices")

  @@index([tenantId])
  @@index([customerId])
  @@index([unitId])
  @@index([invoiceNumber])
}

model InvoiceItem {
  id          String  @id @default(uuid())
  invoiceId   String
  description String
  amount      Float
  quantity    Int
  invoice     Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
}

model Payment {
  id            String        @id @default(uuid())
  tenantId      Int
  amount        Float
  modeOfPayment ModeOfPayment
  transactionId String        @unique
  createdAt     DateTime      @default(now())
  firstName     String?
  receiptId     String?
  receipted     Boolean       @default(false)
  ref           String?
  customerId    String
  tenant        Tenant        @relation(fields: [tenantId], references: [id])
  receipt       Receipt?
  Invoice       Invoice[]     @relation("InvoiceToPayment")
}

model Receipt {
  id              String           @id @default(uuid())
  tenantId        Int
  receiptNumber   String           @unique
  amount          Float
  modeOfPayment   ModeOfPayment
  paidBy          String?
  transactionCode String?
  phoneNumber     String?
  paymentId       String           @unique
  customerId      String
  createdAt       DateTime         @default(now())
  customer        Customer         @relation(fields: [customerId], references: [id], onDelete: Cascade)
  payment         Payment          @relation(fields: [paymentId], references: [id], onDelete: Cascade)
  tenant          Tenant           @relation(fields: [tenantId], references: [id])
  receiptInvoices ReceiptInvoice[] @relation("InvoiceReceipts")
}

model ReceiptInvoice {
  id        String  @id @default(uuid())
  receiptId String
  invoiceId String
  invoice   Invoice @relation("InvoiceReceipts", fields: [invoiceId], references: [id], onDelete: Cascade)
  receipt   Receipt @relation("InvoiceReceipts", fields: [receiptId], references: [id], onDelete: Cascade)
}

model Notification {
  id        String   @id @default(uuid())
  tenantId  Int
  userId    Int
  message   String
  type      String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  tenant    Tenant   @relation(fields: [tenantId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model SMS {
  id          String   @id @default(uuid())
  tenantId    Int
  clientsmsid String   @unique
  mobile      String
  message     String
  status      String
  createdAt   DateTime @default(now())
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
}

model MPESATransactions {
  id            String      @id @default(uuid())
  tenantId      Int
  TransID       String      @unique
  TransTime     DateTime
  ShortCode     String
  TransAmount   Float
  BillRefNumber String
  MSISDN        String
  FirstName     String
  processed     Boolean     @default(false)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  mpesaConfig   MPESAConfig @relation(fields: [ShortCode], references: [shortCode], onDelete: Cascade)
  tenant        Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
}

model Task {
  id            Int            @id @default(autoincrement())
  tenantId      Int
  createdBy     Int
  type          TaskType
  status        TaskStatus     @default(PENDING)
  declaredBags  Int?
  remainingBags Int?
  assignedAt    DateTime?
  startedAt     DateTime?
  completedAt   DateTime?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  creator       User           @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  tenant        Tenant         @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  taskAssignees TaskAssignee[]

  @@index([tenantId])
}

model TaskAssignee {
  id         Int        @id @default(autoincrement())
  taskId     Int
  assigneeId Int
  assignedAt DateTime   @default(now())
  assignee   User       @relation(fields: [assigneeId], references: [id], onDelete: Cascade)
  task       Task       @relation(fields: [taskId], references: [id], onDelete: Cascade)
  Customer   Customer[] @relation("CustomerToTaskAssignee")

  @@unique([taskId, assigneeId])
}

model LeaseTermination {
  id              String    @id @default(uuid())
  customerId      String
  tenantId        Int
  stage           String
  terminationDate DateTime?
  reason          String?
  notes           String?
  media           Json[]
  damages         Json[]
  vacatedAt       DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  customer        Customer  @relation(fields: [customerId], references: [id])
  tenant          Tenant    @relation(fields: [tenantId], references: [id])
  invoices        Invoice[] @relation("TerminationInvoices")
}

model AbnormalWaterReading {
  id               String                @id
  tenantId         Int
  reviewed         Boolean               @default(false)
  reviewNotes      String?
  action           AbnormalReviewAction?
  resolved         Boolean               @default(false)
  createdAt        DateTime              @default(now())
  updatedAt        DateTime
  consumption      Float
  customerId       String
  meterPhotoUrl    String?
  period           DateTime
  readById         Int?
  reading          Float
  Customer         Customer              @relation(fields: [customerId], references: [id], onDelete: Cascade)
  User             User?                 @relation(fields: [readById], references: [id])
  Tenant           Tenant                @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  WaterConsumption WaterConsumption[]    @relation("AbnormalWaterReadingToWaterConsumption")
}

model PaymentLink {
  id                Int      @id @default(autoincrement())
  token             String   @unique
  tenantId          Int
  customerId        String
  expiresAt         DateTime
  createdAt         DateTime @default(now())
  paid              Boolean  @default(false)
  merchantRequestId String?  @unique
  checkoutRequestId String?  @unique
  Customer          Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  Tenant            Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([customerId])
}

model powerConsumption {
  id            String    @id
  customerId    String
  tenantId      Int
  readById      Int?
  period        DateTime
  reading       Float
  consumption   Float
  meterPhotoUrl String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime
  Customer      Customer  @relation(fields: [customerId], references: [id], onDelete: Cascade)
  User          User?     @relation(fields: [readById], references: [id])
  Tenant        Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  Invoice       Invoice[] @relation("InvoiceTopowerConsumption")

  @@index([customerId, period])
}

enum TenantStatus {
  ACTIVE
  DISABLED
}

enum UserStatus {
  ACTIVE
  DISABLED
}

enum LandlordStatus {
  ACTIVE
  INACTIVE
}

enum UnitStatus {
  VACANT
  OCCUPIED
  MAINTENANCE
  OCCUPIED_PENDING_PAYMENT
}

enum DepositStatus {
  ACTIVE
  REFUNDED
  FORFEITED
}

enum CustomerStatus {
  ACTIVE
  INACTIVE
  PENDING
}

enum InvoiceStatus {
  UNPAID
  PAID
  PPAID
  CANCELLED
}

enum ModeOfPayment {
  CASH
  MPESA
  BANK_TRANSFER
  CREDIT_CARD
  DEBIT_CARD
}

enum TaskType {
  BAG_ISSUANCE
  PAYMENT_COLLECTION
  CUSTOMER_FEEDBACK
  OTHER
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELED
}

enum AbnormalReviewAction {
  REQUEST_READING
  DISCUSS_CONSUMPTION
  METER_MAINTENANCE
}

enum BillType {
  FULL
  WATER_ONLY
}

enum InvoiceType {
  RENT_PLUS
  WATER
}
