// Define the database connection
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")

 
}


// Generator for Prisma Client
generator client {
  provider = "prisma-client-js"
}

// Tenant model representing an organization
model Tenant {
  id                Int              @id @default(autoincrement())
  name             String
  

  createdBy         String              // User ID of the tenant creator (ADMIN)
  status            TenantStatus     @default(ACTIVE)
  subscriptionPlan  String           // Plan name e.g., 'Ndovu', 'Simba', 'Nyati'
  monthlyCharge     Float 
 
  paymentDetails      String?           
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt

  email               String?   
  phoneNumber         String? 
  alternativePhoneNumber String?
              


  county                String?
  town                  String?
  address                 String? //po box
  building                String?

  street                 String?

  website               String?
  logoUrl               String?
  allowedUsers          Int  @default(1)




  // Relationships
  users             User[]
  customers         Customer[]
  auditLogs         AuditLog[]
  notifications     Notification[]

  smsConfig         SMSConfig?
  mpesaConfig       MPESAConfig?

  //CustomRolePermission CustomRolePermission[]

  Invoice Invoice[]

  Receipt Receipt[]

  Payment Payment[]

  MPESATransaction MPESATransactions[]

  Task Task[]



  tenantInvoices  TenantInvoice[]    // Add this relation
  tenantPayments  TenantPayment[]

  SMS SMS[]



  Building Building[]

  Landlord Landlord[]

  Deposit Deposit[]

  Unit Unit[]

  UserActivity UserActivity[]

  WaterConsumption WaterConsumption[]

  GasConsumption GasConsumption[]

  LeaseTermination LeaseTermination[]
}


// Add this to your existing schema
model TenantInvoice {
  id              String          @id @default(uuid())
  tenantId        Int             // Links to the tenant
  invoicePeriod   DateTime        // The billing period (e.g., Feb 2025)
  invoiceNumber   String          @unique // Unique identifier for the invoice
  invoiceAmount   Float           // Amount due (e.g., monthlyCharge)
  status          InvoiceStatus   @default(UNPAID) // Payment status
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  amountPaid      Float           @default(0) // Tracks payments made toward this invoice

  // Relationships
  tenant          Tenant          @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  payments        TenantPayment[] // Link to payments made for this invoice
}

// Model to track payments made toward TenantInvoices
model TenantPayment {
  id              String          @id @default(uuid())
  tenantInvoiceId String          // Links to the specific tenant invoice
  tenantId        Int             // Links to the tenant
  amount          Float           // Amount paid
  modeOfPayment   ModeOfPayment   // e.g., MPESA, CASH
  transactionId   String?         @unique // Unique ID from payment provider (e.g., MPESA TransID)
  createdAt       DateTime        @default(now())

  // Relationships
  tenantInvoice   TenantInvoice   @relation(fields: [tenantInvoiceId], references: [id], onDelete: Cascade)
  tenant          Tenant          @relation(fields: [tenantId], references: [id], onDelete: Cascade)
}

// Update the Tenant model to include TenantInvoices and TenantPayments

// Enum for tenant status
enum TenantStatus {
  ACTIVE
  DISABLED
}

// User model with roles and permissions
model User {
  id                  Int       @id @default(autoincrement())
  tenantId            Int       // Tenant to which the user belongs
  firstName           String
  lastName            String
  email               String    @unique
  phoneNumber         String    @unique
              

  gender                String?
  county                String?
  town                  String?
  password            String
  role                 String[]
  customPermissions   Json?     // Custom permissions (optional)
  createdBy           Int?      // User who created this account
  status              UserStatus @default(ACTIVE)
  mfaEnabled          Boolean   @default(false)


  lastLogin           DateTime    // Stores last login time
  loginCount          Int @default(0) // Tracks login frequency


  // Added fields for OTP reset
  resetCode           String?   // Stores hashed OTP
  resetCodeExpiresAt  DateTime? // OTP expiry time
  otpAttempts         Int       @default(0) // Tracks failed attempts
  // Relationships
  tenant              Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  createdUsers        User[]    @relation("CreatedUsers")

  userActivities      UserActivity[]
  notifications       Notification[]

  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  User User[] @relation("CreatedUsers")

  AuditLog AuditLog[]

  

  TaskAssignee TaskAssignee[]

  Task Task[]

}


model UserActivity {
  id          Int       @id @default(autoincrement())
  userId      Int
  tenantId     Int
  action      String    // e.g., 'LOGIN', 'LOGOUT', 'VIEW'
  timestamp   DateTime  @default(now())

  tenant      Tenant    @relation(fields: [tenantId], references: [id])

  // Relationships
  user        User      @relation(fields: [userId], references: [id])
}




// Enum for user status
enum UserStatus {
  ACTIVE
  DISABLED
}



// Audit Log model for tracking user actions
model AuditLog {
  id          String       @id @default(uuid())
  tenantId    Int
  userId      Int
  action      String   // e.g., 'CREATE', 'UPDATE', 'DELETE'
  resource    String   // e.g., 'USER', 'INVOICE'
  details     Json?    // Additional action details
  description  String?
  createdAt   DateTime @default(now())

  // Relationships
  tenant      Tenant   @relation(fields: [tenantId], references: [id])
  user        User     @relation(fields: [userId], references: [id])
}

// SMS Configuration model defined per tenant
model SMSConfig {
  id         Int      @id @default(autoincrement())
  tenantId   Int      @unique
  partnerId  String
  apiKey     String
  shortCode  String
  customerSupportPhoneNumber String
  tenant     Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt


}

// MPESA Configuration model defined per tenant
model MPESAConfig {
  id          Int      @id @default(autoincrement())
  tenantId    Int      @unique
  shortCode   String @unique
  name        String
  apiKey      String
  passKey     String
 
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt


  MPESATransaction MPESATransactions[]
}

model Landlord {
  id                String           @id @default(uuid())
  tenantId          Int              // Links to tenant for multi-tenant app
  firstName         String
  lastName          String
  email             String?          @unique
  phoneNumber       String           @unique
  status            LandlordStatus   @default(ACTIVE)
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt

  tenant            Tenant           @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  buildings         Building[]

  @@index([tenantId])
  @@index([phoneNumber])
  @@index([email])
}

// Building model
model Building {
  id          String    @id @default(uuid())
  tenantId    Int
  landlordId  String
  name        String
  address     String?
  unitCount   Int?
  gasRate     Float?
  waterRate   Float?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  tenant      Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  landlord    Landlord  @relation(fields: [landlordId], references: [id], onDelete: Cascade)
  units       Unit[]
  @@index([tenantId])
  @@index([landlordId])
  Customer Customer[]
}

// Enum for landlord status
enum LandlordStatus {
  ACTIVE
  INACTIVE
}


model Unit {
  id                String          @id @default(uuid())
  tenantId          Int             // Links to tenant
  buildingId        String          // Links to building
  unitNumber        String          // e.g., "A12"
  monthlyCharge     Float           // Monthly rent for this unit
  depositAmount     Float           // Deposit required for this unit
  garbageCharge     Float?          // Optional fixed monthly garbage fee
  serviceCharge     Float?          // Optional fixed monthly service charge
  status            UnitStatus      @default(VACANT) // e.g., VACANT, OCCUPIED
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  tenant            Tenant          @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  building          Building        @relation(fields: [buildingId], references: [id], onDelete: Cascade)
  customers         Customer[]      // Customers assigned to this unit
  @@index([tenantId])
  @@index([buildingId])
  @@index([unitNumber])
  Invoice Invoice[]
}


enum UnitStatus {
  VACANT      // Unit is not occupied
  OCCUPIED    // Unit is occupied by a customer
  MAINTENANCE
  OCCUPIED_PENDING_PAYMENT
}



model Customer {
  id                    String           @id @default(uuid())
  tenantId              Int
  unitId                String?          // Links to unit (optional if not assigned)
  firstName             String
  lastName              String
  email                 String?
  phoneNumber           String           @unique
  secondaryPhoneNumber  String?
  nationalId            String?          @unique
  status                CustomerStatus   @default(ACTIVE)
  closingBalance        Float            @default(0)
  createdAt             DateTime         @default(now())
  updatedAt             DateTime         @updatedAt
   leaseFileUrl        String?
  leaseStartDate       DateTime?
  leaseEndDate         DateTime?
  tenant                Tenant           @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  unit                  Unit?            @relation(fields: [unitId], references: [id], onDelete: SetNull)
  invoices              Invoice[]
  payments              Payment[]
  deposits              Deposit[]
  taskAssignees         TaskAssignee[]
  gasConsumptions       GasConsumption[]
  waterConsumptions     WaterConsumption[]
  receipts              Receipt[]

  @@index([tenantId])
  @@index([unitId])
  @@index([phoneNumber])
  @@index([email])
  @@index([nationalId])
  @@index([status])
  Building Building[]
  LeaseTermination LeaseTermination[]
}

  model Deposit {
  id              String          @id @default(uuid())
  tenantId        Int             // Links to the tenant
  customerId      String          // Links to the customer
  invoiceId       String?         // Links to the invoice that billed the deposit
  amount          Float           // Deposit amount
  status          DepositStatus   @default(ACTIVE) // e.g., ACTIVE, REFUNDED, FORFEITED
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  refundedAt      DateTime?       // When the deposit was refunded
  refundAmount    Float?          // Amount refunded (after deductions)
  deductionReason String?         // Reason for deductions (e.g., damages)
  refundTransactionId String?     @unique // Links to refund transaction (if any)

  // Relationships
  tenant          Tenant          @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  customer        Customer        @relation(fields: [customerId], references: [id], onDelete: Cascade)
  invoice         Invoice?        @relation(fields: [invoiceId], references: [id], onDelete: SetNull)
}

enum DepositStatus {
  ACTIVE        // Deposit is held
  REFUNDED      // Deposit fully or partially refunded
  FORFEITED     // Deposit not refunded due to damages or other reasons
}


// GasConsumption model
model GasConsumption {
  id            String    @id @default(uuid())
  customerId    String
  period        DateTime  // e.g., "2025-02-01"
   reading       Float     // Current meter reading 
  consumption   Float     // e.g., 10 cubic meters

tenantId     Int
  tenant        Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  customer      Customer  @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@index([customerId, period])
}

// WaterConsumption model
model WaterConsumption {
  id            String    @id @default(uuid())
  customerId    String
  tenantId     Int
  period        DateTime  // e.g., "2025-02-01"
  reading       Float     // Current meter reading in liters
  consumption   Float     // Calculated: current reading - previous reading
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  customer      Customer  @relation(fields: [customerId], references: [id], onDelete: Cascade)
  tenant        Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  @@index([customerId, period])
}
// Enum for customer status
enum CustomerStatus {
  ACTIVE
  INACTIVE
  PENDING
}

// Invoice model for customer billing

// Invoice model
model Invoice {
  id                 String          @id @default(uuid())
  tenantId           Int
  customerId         String
  unitId             String?         // Now optional
  invoicePeriod      DateTime
  invoiceNumber      String          @unique
  invoiceAmount      Float
  amountPaid         Float           @default(0)
  status             InvoiceStatus
  closingBalance     Float           @default(0)
  isSystemGenerated  Boolean
  createdBy          String
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
  tenant             Tenant          @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  customer           Customer        @relation(fields: [customerId], references: [id], onDelete: Cascade)
  unit               Unit?           @relation(fields: [unitId], references: [id], onDelete: SetNull)
  InvoiceItem        InvoiceItem[]
  payments           Payment[]
  @@index([tenantId])
  @@index([customerId])
  @@index([unitId])
  @@index([invoiceNumber])
  Deposit Deposit[]
  ReceiptInvoice ReceiptInvoice[] @relation("InvoiceReceipts")
  LeaseTermination LeaseTermination[] @relation("TerminationInvoices")
}

// InvoiceItem model
model InvoiceItem {
  id          String   @id @default(uuid())
  invoiceId   String
  description String
  amount      Float
  quantity    Int

  invoice     Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
}



// Enum for invoice status
enum InvoiceStatus {
  UNPAID
  PAID
  PPAID
  CANCELLED
}

// Payment model for customer payments
model Payment {
  id             String      @id @default(uuid())
  tenantId       Int
  amount         Float
  modeOfPayment  ModeOfPayment
  firstName      String?
  receipted      Boolean     @default(false)
  transactionId  String     @unique 
  ref            String?  
  receiptId       String?

  receipt        Receipt?    
  createdAt      DateTime    @default(now()) 
   tenant  Tenant @relation(fields: [tenantId],references: [id])

  Invoice Invoice[]

  Customer Customer[]
}

// Enum for payment methods
enum ModeOfPayment {
  CASH
  MPESA
  BANK_TRANSFER
  CREDIT_CARD
  DEBIT_CARD
}









// Receipt model
model Receipt {
  id             String      @id @default(uuid())

  tenantId        Int
 
  receiptNumber  String      @unique 
  amount         Float
  modeOfPayment  ModeOfPayment
  paidBy         String?
  transactionCode String?
  phoneNumber    String?
  paymentId      String @unique 

  payment        Payment? @relation(fields: [paymentId], references: [id], onDelete: Cascade)   
  receiptInvoices ReceiptInvoice[] @relation("InvoiceReceipts")
  customer       Customer    @relation(fields: [customerId], references: [id], onDelete: Cascade)
  
  tenant  Tenant @relation(fields: [tenantId],references: [id])
  customerId     String
  createdAt      DateTime    @default(now())
}



// ReceiptInvoice model
model ReceiptInvoice {
  id          String      @id @default(uuid())
  receiptId   String
  invoiceId   String

  receipt     Receipt?     @relation("InvoiceReceipts", fields: [receiptId], references: [id], onDelete: Cascade)
  invoice     Invoice?     @relation("InvoiceReceipts", fields: [invoiceId], references: [id], onDelete: Cascade)
}













// Notification model for user alerts and notifications
model Notification {
  id          String       @id @default(uuid())
  tenantId    Int
  userId      Int
  message     String
  type        String    // e.g., 'ALERT', 'REMINDER'
  read        Boolean   @default(false)
  createdAt   DateTime  @default(now())

  // Relationships
  tenant      Tenant    @relation(fields: [tenantId], references: [id])
  user        User      @relation(fields: [userId], references: [id])
}

// User Activity model for tracking user actions



model SMS {
  id           String   @id @default(uuid())
  tenantId     Int
  clientsmsid  String   @unique
  mobile       String
  message      String
  status       String
  createdAt    DateTime @default(now())

  // Relationship
  tenant       Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
}


model MPESATransactions {
  id             String     @id @default(uuid())
  tenantId       Int
  TransID        String   @unique
  TransTime      DateTime
  ShortCode      String
  TransAmount    Float
  BillRefNumber  String
  MSISDN         String
  FirstName      String
  processed      Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  tenant         Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  mpesaConfig    MPESAConfig @relation(fields: [ShortCode], references: [shortCode], onDelete: Cascade)
}






model Task {
  id              Int            @id @default(autoincrement())
  tenantId        Int            // Tenant to which the task belongs
  createdBy       Int            // User who created the task
  type            TaskType       // Type of task (e.g., BAG_ISSUANCE, PAYMENT_COLLECTION)
  status          TaskStatus     @default(PENDING) // Task status
  declaredBags    Int?           
  remainingBags   Int?
  assignedAt      DateTime?      // When the task was assigned
  startedAt       DateTime?      // When the task was started
  completedAt     DateTime?      // When the task was completed
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  // Relationships
  tenant          Tenant         @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  creator         User           @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  taskAssignees   TaskAssignee[] // Users assigned to this task

  @@index([tenantId]) // Index for tenant-level filtering

}

model TaskAssignee {
  id         Int      @id @default(autoincrement())
  taskId     Int      // Task ID
  assigneeId Int      // User ID of the assignee
  assignedAt DateTime @default(now()) // When the user was assigned the task

  // Relationships
  task       Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  assignee   User     @relation(fields: [assigneeId], references: [id], onDelete: Cascade)
  
  @@unique([taskId, assigneeId]) // Ensure a user cannot be assigned the same task multiple times

  Customer Customer[]
}

enum TaskType {
  BAG_ISSUANCE
  PAYMENT_COLLECTION
  CUSTOMER_FEEDBACK
  OTHER
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELED
}


model LeaseTermination {
  id              String        @id @default(uuid())
  customerId      String
  tenantId        Int
  stage           String        // e.g., "DETAILS", "MEDIA", "DAMAGES", "INVOICES", "VACATED"
  terminationDate DateTime?
  reason          String?
  notes           String?
  media           Json[]        // Array of { url: string, type: "photo" | "video" }
  damages         Json[]        // Array of { description: string, notes: string, media: Json[] }
  invoices        Invoice[]     @relation("TerminationInvoices")
  vacatedAt       DateTime?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  customer        Customer      @relation(fields: [customerId], references: [id])
  tenant          Tenant        @relation(fields: [tenantId], references: [id])
}

