// Define the database connection
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")

 
}


// Generator for Prisma Client
generator client {
  provider = "prisma-client-js"
}

// Tenant model representing an organization
model Tenant {
  id                Int              @id @default(autoincrement())
  name             String
  

  createdBy         String              // User ID of the tenant creator (ADMIN)
  status            TenantStatus     @default(ACTIVE)
  subscriptionPlan  String           // Plan name e.g., 'Ndovu', 'Simba', 'Nyati'
  monthlyCharge     Float 
  numberOfBags       Int?  
  paymentDetails      String?           
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt

  email               String?   
  phoneNumber         String? 
  alternativePhoneNumber String?
              


  county                String?
  town                  String?
  address                 String? //po box
  building                String?

  street                 String?

  website               String?
  logoUrl               String?
  allowedUsers          Int  @default(1)




  // Relationships
  users             User[]
  customers         Customer[]
  auditLogs         AuditLog[]
  notifications     Notification[]

  smsConfig         SMSConfig?
  mpesaConfig       MPESAConfig?

  //CustomRolePermission CustomRolePermission[]

  Invoice Invoice[]

  Receipt Receipt[]

  Payment Payment[]

  MPESATransaction MPESATransactions[]

  Task Task[]

  TrashBagIssuance TrashBagIssuance[]

  tenantInvoices  TenantInvoice[]    // Add this relation
  tenantPayments  TenantPayment[]

  SMS SMS[]

  GarbageCollection GarbageCollection[]
}


// Add this to your existing schema
model TenantInvoice {
  id              String          @id @default(uuid())
  tenantId        Int             // Links to the tenant
  invoicePeriod   DateTime        // The billing period (e.g., Feb 2025)
  invoiceNumber   String          @unique // Unique identifier for the invoice
  invoiceAmount   Float           // Amount due (e.g., monthlyCharge)
  status          InvoiceStatus   @default(UNPAID) // Payment status
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  amountPaid      Float           @default(0) // Tracks payments made toward this invoice

  // Relationships
  tenant          Tenant          @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  payments        TenantPayment[] // Link to payments made for this invoice
}

// Model to track payments made toward TenantInvoices
model TenantPayment {
  id              String          @id @default(uuid())
  tenantInvoiceId String          // Links to the specific tenant invoice
  tenantId        Int             // Links to the tenant
  amount          Float           // Amount paid
  modeOfPayment   ModeOfPayment   // e.g., MPESA, CASH
  transactionId   String?         @unique // Unique ID from payment provider (e.g., MPESA TransID)
  createdAt       DateTime        @default(now())

  // Relationships
  tenantInvoice   TenantInvoice   @relation(fields: [tenantInvoiceId], references: [id], onDelete: Cascade)
  tenant          Tenant          @relation(fields: [tenantId], references: [id], onDelete: Cascade)
}

// Update the Tenant model to include TenantInvoices and TenantPayments

// Enum for tenant status
enum TenantStatus {
  ACTIVE
  DISABLED
}

// User model with roles and permissions
model User {
  id                  Int       @id @default(autoincrement())
  tenantId            Int       // Tenant to which the user belongs
  firstName           String
  lastName            String
  email               String    @unique
  phoneNumber         String    @unique
              

  gender                String?
  county                String?
  town                  String?
  password            String
  role                 String[]
  customPermissions   Json?     // Custom permissions (optional)
  createdBy           Int?      // User who created this account
  status              UserStatus @default(ACTIVE)
  mfaEnabled          Boolean   @default(false)

  bagsHeld            Int?     
  originalBagsIssued  Int? 
  lastLogin           DateTime    // Stores last login time
  loginCount          Int @default(0) // Tracks login frequency


  // Added fields for OTP reset
  resetCode           String?   // Stores hashed OTP
  resetCodeExpiresAt  DateTime? // OTP expiry time
  otpAttempts         Int       @default(0) // Tracks failed attempts
  // Relationships
  tenant              Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  createdUsers        User[]    @relation("CreatedUsers")

  userActivities      UserActivity[]
  notifications       Notification[]

  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  User User[] @relation("CreatedUsers")

  AuditLog AuditLog[]

  

  TaskAssignee TaskAssignee[]

  Task Task[]

  GarbageCollection GarbageCollection[]
}


model UserActivity {
  id          Int       @id @default(autoincrement())
  userId      Int
  action      String    // e.g., 'LOGIN', 'LOGOUT', 'VIEW'
  timestamp   DateTime  @default(now())

  // Relationships
  user        User      @relation(fields: [userId], references: [id])
}




// Enum for user status
enum UserStatus {
  ACTIVE
  DISABLED
}



// Audit Log model for tracking user actions
model AuditLog {
  id          String       @id @default(uuid())
  tenantId    Int
  userId      Int
  action      String   // e.g., 'CREATE', 'UPDATE', 'DELETE'
  resource    String   // e.g., 'USER', 'INVOICE'
  details     Json?    // Additional action details
  description  String?
  createdAt   DateTime @default(now())

  // Relationships
  tenant      Tenant   @relation(fields: [tenantId], references: [id])
  user        User     @relation(fields: [userId], references: [id])
}

// SMS Configuration model defined per tenant
model SMSConfig {
  id         Int      @id @default(autoincrement())
  tenantId   Int      @unique
  partnerId  String
  apiKey     String
  shortCode  String
  customerSupportPhoneNumber String
  tenant     Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt


}

// MPESA Configuration model defined per tenant
model MPESAConfig {
  id          Int      @id @default(autoincrement())
  tenantId    Int      @unique
  shortCode   String @unique
  name        String
  apiKey      String
  passKey     String
 
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt


  MPESATransaction MPESATransactions[]
}

// Customer model representing customers served by the tenant
model Customer {
  id                    String                    @id @default(uuid())
  tenantId              Int
  firstName             String
  lastName              String
  email                 String?               
  phoneNumber           String                @unique
  secondaryPhoneNumber  String?
  gender                String?
  county                String?
  town                  String?
  location              String?
  estateName            String?               // Optional estate name
  building              String?               // Optional building name
  houseNumber           String?               // Optional house number
  category              String?
  monthlyCharge         Float
  status                CustomerStatus        @default(ACTIVE)
  garbageCollectionDay   String  // Day of the week for collection
  collected             Boolean               @default(false)
  closingBalance        Float                 // Closing balance field
  trashBagsIssued       Boolean               @default(false) // Track if bags issued this month


  // Relationships
  tenant                Tenant                 @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  invoices              Invoice[]
  receipts              Receipt[]
  trashbagsHistory      TrashBagIssuance[]

  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt

 





  GarbageCollection GarbageCollection[]

  @@index([tenantId]) // Index for faster queries by tenant
  @@index([phoneNumber]) // Index for faster queries by phone number
  @@index([email]) // Index for faster queries by email
  @@index([status]) // Index for faster queries by status
}

// Invoice model

// Invoice model
model Invoice {
  id                  String       @id @default(uuid())
  tenantId             Int  
  customerId          String
  invoicePeriod       DateTime
  invoiceNumber       String       @unique 
  invoiceAmount       Float        
  closingBalance      Float        
  status              InvoiceStatus @default(UNPAID) 
  isSystemGenerated   Boolean    
  createdAt           DateTime     @default(now())  
  amountPaid          Float        @default(0) 

  customer            Customer     @relation(fields: [customerId], references: [id], onDelete: Cascade)

  tenant              Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  items               InvoiceItem[]
  receiptInvoices     ReceiptInvoice[] @relation("InvoiceReceipts")
 
}

enum InvoiceStatus {
  UNPAID
  PAID
  PPAID
  CANCELLED
}

// InvoiceItem model
model InvoiceItem {
  id          String   @id @default(uuid())
  invoiceId   String
  description String   
  amount      Float    
  quantity    Int      

  invoice     Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
}

// Receipt model
model Receipt {
  id             String      @id @default(uuid())

  tenantId        Int
 
  receiptNumber  String      @unique 
  amount         Float
  modeOfPayment  ModeOfPayment
  paidBy         String?
  transactionCode String?
  phoneNumber    String?
  paymentId      String @unique 

  payment        Payment? @relation(fields: [paymentId], references: [id], onDelete: Cascade)   
  receiptInvoices ReceiptInvoice[] @relation("InvoiceReceipts")
  customer       Customer    @relation(fields: [customerId], references: [id], onDelete: Cascade)
  
  tenant  Tenant @relation(fields: [tenantId],references: [id])
  customerId     String
  createdAt      DateTime    @default(now())
}



// ReceiptInvoice model
model ReceiptInvoice {
  id          String      @id @default(uuid())
  receiptId   String
  invoiceId   String

  receipt     Receipt?     @relation("InvoiceReceipts", fields: [receiptId], references: [id], onDelete: Cascade)
  invoice     Invoice?     @relation("InvoiceReceipts", fields: [invoiceId], references: [id], onDelete: Cascade)
}



// Enum for payment methods
enum ModeOfPayment {
  CASH
  MPESA
  BANK_TRANSFER
  CREDIT_CARD
  DEBIT_CARD
}



model Payment {
  id             String      @id @default(uuid())
  tenantId       Int
  amount         Float
  modeOfPayment  ModeOfPayment
  firstName      String?
  receipted      Boolean     @default(false)
  transactionId  String     @unique 
  ref            String?  
  receiptId       String?

  receipt        Receipt?    
  createdAt      DateTime    @default(now()) 
   tenant  Tenant @relation(fields: [tenantId],references: [id])
}



// Enum for customer status
enum CustomerStatus {
  ACTIVE
  INACTIVE
}

// Enum for garbage collection day
// enum GarbageCollectionDay {
//   MONDAY
//   TUESDAY
//   WEDNESDAY
//   THURSDAY
//   FRIDAY
//   SATURDAY
//   SUNDAY
// }

// Notification model for user alerts and notifications
model Notification {
  id          String       @id @default(uuid())
  tenantId    Int
  userId      Int
  message     String
  type        String    // e.g., 'ALERT', 'REMINDER'
  read        Boolean   @default(false)
  createdAt   DateTime  @default(now())

  // Relationships
  tenant      Tenant    @relation(fields: [tenantId], references: [id])
  user        User      @relation(fields: [userId], references: [id])
}

// User Activity model for tracking user actions



model SMS {
  id           String   @id @default(uuid())
  tenantId     Int
  clientsmsid  String   @unique
  mobile       String
  message      String
  status       String
  createdAt    DateTime @default(now())

  // Relationship
  tenant       Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
}


model MPESATransactions {
  id             String     @id @default(uuid())
  tenantId       Int
  TransID        String   @unique
  TransTime      DateTime
  ShortCode      String
  TransAmount    Float
  BillRefNumber  String
  MSISDN         String
  FirstName      String
  processed      Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  tenant         Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  mpesaConfig    MPESAConfig @relation(fields: [ShortCode], references: [shortCode], onDelete: Cascade)
}




model GarbageCollection {
  id            String    @id @default(uuid())
  tenantId      Int
  customerId    String
  taskId        Int?      // Optional link to a task
  collectedBy   Int?      // Optional user who performed the collection
  collectionDate DateTime @default(now()) // When the garbage was collected
  notes         String?   // Optional notes
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relationships
  tenant        Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  customer      Customer  @relation(fields: [customerId], references: [id], onDelete: Cascade)
  task          Task?     @relation(fields: [taskId], references: [id], onDelete: SetNull)
  collector     User?     @relation(fields: [collectedBy], references: [id], onDelete: SetNull)

  @@index([customerId]) // Index for faster queries by customer
}

model Task {
  id              Int            @id @default(autoincrement())
  tenantId        Int            // Tenant to which the task belongs
  createdBy       Int            // User who created the task
  type            TaskType       // Type of task (e.g., BAG_ISSUANCE, PAYMENT_COLLECTION)
  status          TaskStatus     @default(PENDING) // Task status
  declaredBags    Int?           
  remainingBags   Int?
  assignedAt      DateTime?      // When the task was assigned
  startedAt       DateTime?      // When the task was started
  completedAt     DateTime?      // When the task was completed
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  // Relationships
  tenant          Tenant         @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  creator         User           @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  taskAssignees   TaskAssignee[] // Users assigned to this task
  trashBagIssuances TrashBagIssuance[] // Issuances related to this task (if applicable)

  @@index([tenantId]) // Index for tenant-level filtering
  GarbageCollection GarbageCollection[]
}

model TaskAssignee {
  id         Int      @id @default(autoincrement())
  taskId     Int      // Task ID
  assigneeId Int      // User ID of the assignee
  assignedAt DateTime @default(now()) // When the user was assigned the task

  // Relationships
  task       Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  assignee   User     @relation(fields: [assigneeId], references: [id], onDelete: Cascade)
  
  @@unique([taskId, assigneeId]) // Ensure a user cannot be assigned the same task multiple times
  TrashBagIssuance TrashBagIssuance[]
}

enum TaskType {
  BAG_ISSUANCE
  PAYMENT_COLLECTION
  CUSTOMER_FEEDBACK
  OTHER
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELED
}




model TrashBagIssuance {
  id            String   @id @default(uuid())
  taskId        Int      // Foreign key linking to Task
  customerId    String   // Foreign key linking to Customer
  tenantId      Int      // Foreign key linking to Tenant
  issuedById    Int?     // Foreign key linking to TaskAssignee (the assignee who issued the bags)
  issuedDate    DateTime @default(now()) // When bags were issued
  bagsIssued    Int      // Number of bags issued
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relationships
  task          Task      @relation(fields: [taskId], references: [id], onDelete: Cascade)
  customer      Customer  @relation(fields: [customerId], references: [id], onDelete: Cascade)
  tenant        Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  issuedBy      TaskAssignee? @relation(fields: [issuedById], references: [id], onDelete: SetNull)

  @@index([issuedById]) // Optional: Index for faster queries by issuer
}